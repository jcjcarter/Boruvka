Parallel Version

8 Threads
.25 seconds

4 Threads
.27 Seconds

2 Threads
.39 Seconds
 
1 Threads
.55 Seconds

Sequential Version

.51 Seconds

Under the Boruvka java file, in the function Main there I initialize an array of threads
that carry out the computations in the given sequence version. To avoid data races between
the threads, I try-lock the Component declared in the while condition. If the try-lock
fails then a continued is called. For the variable Component call "other" I place a try-lock on it
and if the try-lock fails then I unlock the variable Component declared in the while condition
and add it back to the Loader.nodesLoaded, then step into a continue statment. If both locks are
successful then the method merge is called and since both Components are locked they cannot be 
accessed by other threads. Once the merge method is finished, both of the components are unlocked
and the merged Component is added back into Loader.nodesLoaded.

In the Loader class, I changed the nodes and edges map data structures from a hashmap to concurrent
hashmaps and I changed the queue called nodesLoaded to a concurrent linked queue.
